{"version":3,"sources":["Components/Board/Row/Cell/index.tsx","Components/Board/Row/index.tsx","Components/Board/index.tsx","Components/Keyboard/Key/index.tsx","Components/Keyboard/UndoKey/index.tsx","Components/Keyboard/index.tsx","Components/Modal/index.tsx","Models/Sudoku.ts","App.tsx","index.tsx"],"names":["Cell","board","selectedPosition","setSelectedPosition","blockedBoard","idxRow","idxCol","row","col","selected","blocked","content","empty","className","onClick","curr","Row","Array","from","keys","map","Board","Key","sudoku","setBoard","value","isHint","current","setPosition","getBoard","UndoKey","disabled","resetPosition","xmlns","width","height","fill","viewBox","d","Keyboard","hint","index","Modal","setModalState","status","title","message","modal","id","style","display","Sudoku","UNDEFINED","N","logicalBoard","rows","cols","squares","this","initBoard","buildMatrix","fillBoard","solve","i","j","shuffle","length","_","x","solveBoard","numOfCells","Math","ceil","positions","floor","idSquare","getIdSquare","JSON","parse","stringify","nums","push","array","currentIndex","randomIndex","random","n","m","matrix","App","React","useState","setFill","useRef","setHint","modalState","useEffect","getHint","checkSudoku","min","max","step","type","onChange","event","Number","nativeEvent","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e5f5f8b0.chunk.js","sourcesContent":["import React from 'react'\nimport { Position } from '../../../../Models/Position'\nimport './style.css'\n\n\ninterface CellProps {\n\tboard: number[][],\n\tselectedPosition: Position,\n\tsetSelectedPosition: React.Dispatch<React.SetStateAction<Position>>,\n\tblockedBoard: boolean[][]\n\tidxRow: number\n\tidxCol: number\n}\n\n\nexport function Cell({ board, selectedPosition, setSelectedPosition, blockedBoard, idxRow, idxCol }: CellProps) {\n\tconst { row, col } = selectedPosition\n\tconst selected = row === idxRow && col === idxCol\n\tconst blocked = blockedBoard[idxRow][idxCol]\n\tconst content = board[idxRow][idxCol]\n\tconst empty = content === -1\n\n\tfunction handleClick() {\n\t\tif(blocked) return\n\t\tsetSelectedPosition((curr) => {\n\t\t\tif (curr.row === idxRow && curr.col === idxCol) return { row: -1, col: -1 }\n\t\t\telse return { row: idxRow, col: idxCol }\n\t\t})\n\t}\n\n\treturn (\n\t\t<div className=\"Cell\" onClick={handleClick}>\n\t\t\t<div \n\t\t\t\tclassName={'Content' + (blocked ? ' bg-gray' : '') + (selected ? ' selected' : '') + ( empty ? ' empty': '') + (blocked ? ' blocked': '')}>\n\t\t\t\t{ content }\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n","import React from 'react'\nimport { Position } from \"../../../Models/Position\"\nimport { Cell } from './Cell'\nimport './style.css'\n\n\ninterface RowProps {\n\tboard: number[][],\n\tselectedPosition: Position,\n\tsetSelectedPosition: React.Dispatch<React.SetStateAction<Position>>,\n\tblockedBoard: boolean[][]\n\tidxRow: number\n}\n\n\nexport function Row({ board, selectedPosition, setSelectedPosition, blockedBoard, idxRow }: RowProps) {\n\treturn (\n\t\t<div className=\"Row\">\n\t\t\t{\n\t\t\t\tArray.from(Array(9).keys()).map((idxCol) => (\n\t\t\t\t\t<Cell\n\t\t\t\t\t\tboard={board}\n\t\t\t\t\t\tselectedPosition={selectedPosition}\n\t\t\t\t\t\tsetSelectedPosition={setSelectedPosition}\n\t\t\t\t\t\tblockedBoard={blockedBoard}\n\t\t\t\t\t\tidxRow={idxRow}\n\t\t\t\t\t\tidxCol={idxCol}\n\t\t\t\t\t\tkey={idxCol}\n\t\t\t\t\t/>\n\t\t\t\t))\n\t\t\t}\n\t\t</div>\n\t)\n}\n","import React from 'react'\nimport { Position } from '../../Models/Position'\nimport { Row } from './Row'\nimport './style.css'\n\n\ninterface BoardProps {\n    board: number[][],\n    selectedPosition: Position,\n    setSelectedPosition: React.Dispatch<React.SetStateAction<Position>>,\n    blockedBoard: boolean[][]\n}\n\n\nexport function Board({ board, blockedBoard, selectedPosition, setSelectedPosition }: BoardProps) {\n    return (\n        <div className=\"Board\">\n            {\n                Array.from(Array(9).keys()).map((idxRow) => (\n                    <Row\n                        board={board}\n                        blockedBoard={blockedBoard}\n                        selectedPosition={selectedPosition}\n                        setSelectedPosition={setSelectedPosition}\n                        idxRow={idxRow}\n                        key={idxRow}\n                    />\n                ))\n            }\n        </div>\n    )\n}","import React from 'react'\nimport { Position } from '../../../Models/Position'\nimport { Sudoku } from '../../../Models/Sudoku'\nimport './style.css'\n\n\ninterface KeyProps {\n    sudoku: React.MutableRefObject<Sudoku>\n    setBoard: React.Dispatch<React.SetStateAction<number[][]>>\n    value: number,\n    isHint: boolean\n    selectedPosition: Position\n}\n\n\nexport function Key({ sudoku, setBoard, value, isHint, selectedPosition }: KeyProps) {\n    const { row, col } = selectedPosition\n    \n    function handleClick(){\n        if(sudoku.current.setPosition(row, col, value)){\n            setBoard(sudoku.current.getBoard())\n        }\n    }\n\n    return (\n        <div onClick={handleClick} className={'Key' + ( !isHint ? ' disabled' : '' )}>\n            <div className=\"content\">\n                { value }\n            </div>\n        </div>\n    )\n}","import React from \"react\"\nimport { Position } from \"../../../Models/Position\"\nimport { Sudoku } from \"../../../Models/Sudoku\"\nimport './style.css'\n\n\ninterface UndoKeyProps {\n    sudoku: React.MutableRefObject<Sudoku>\n    board: number[][]\n    setBoard: React.Dispatch<React.SetStateAction<number[][]>>\n    selectedPosition: Position\n}\n\n\nexport function UndoKey({ sudoku, board, setBoard, selectedPosition }: UndoKeyProps) {\n    const { row, col } = selectedPosition\n    const disabled = (row === -1 && col === -1 )|| (board[row][col] === -1)\n\n    function handleClick() {\n        if(disabled) return\n        sudoku.current.resetPosition(row, col)\n        setBoard(sudoku.current.getBoard())\n    }\n\n    return (\n        <div onClick={handleClick} className={'Key' + ( disabled ? ' disabled' : '' )}>\n            <div className=\"content\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"30\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\n                    <path d=\"M8 3a5 5 0 1 1-4.546 2.914.5.5 0 0 0-.908-.417A6 6 0 1 0 8 2v1z\" />\n                    <path d=\"M8 4.466V.534a.25.25 0 0 0-.41-.192L5.23 2.308a.25.25 0 0 0 0 .384l2.36 1.966A.25.25 0 0 0 8 4.466z\" />\n                </svg>\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport './style.css'\nimport { Hint } from '../../Models/Hint'\nimport { Position } from '../../Models/Position'\nimport { Sudoku } from '../../Models/Sudoku'\nimport { Key } from './Key'\nimport { UndoKey } from './UndoKey'\n\n\ninterface KeyboardProps {\n    selectedPosition: Position\n    sudoku: React.MutableRefObject<Sudoku>\n    board: number[][]\n    setBoard: React.Dispatch<React.SetStateAction<number[][]>>\n    hint: Hint\n}\n\n\nexport function Keyboard({ selectedPosition, sudoku, setBoard, hint, board }: KeyboardProps) {\n    const keys = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return (\n        <div className=\"Keyboard\">\n            <UndoKey board={board} sudoku={sudoku} setBoard={setBoard} selectedPosition={selectedPosition} />\n            {\n                keys.map((value, index) => <Key key={index} selectedPosition={selectedPosition} sudoku={sudoku} setBoard={setBoard} isHint={hint[value]} value={value} />)\n            }\n        </div>\n    )\n}\n","import React from \"react\"\nimport './style.css'\n\n\nexport interface ModalState {\n    title: string\n    message: string\n    modal: boolean\n}\n\n\ninterface ModalProps {\n    status: ModalState\n    setModalState: React.Dispatch<React.SetStateAction<ModalState>>\n}\n\n\nexport function Modal({setModalState, status: {title, message, modal}}: ModalProps) {\n    function closeModal() {\n        setModalState({ title: '', message: '', modal: false})\n    }\n\n    return (\n        <div id=\"myModal\" className=\"modal\" style={{ display: (modal ? 'block': 'none') }}>\n            <div className=\"modal-content\">\n                <span onClick={closeModal} className=\"close\"> &times; </span>\n                <h1>{ title }</h1>\n                <p>{ message }</p>\n            </div>\n        </div>\n    )\n}","type LogicalBoard = {\n    rows: boolean[][]\n    cols: boolean[][]\n    squares: boolean[][],\n    blocked: boolean[][]\n}\n\nexport class Sudoku {\n    private UNDEFINED = -1\n    private N = 9\n    private board: number[][] = []\n    public logicalBoard: LogicalBoard = {\n        rows: [],\n        cols: [],\n        squares: [],\n        blocked: []\n    }\n\n    constructor(private fill: number) {\n        this.initBoard()\n    }\n\n    private initBoard(): void {\n        this.board = this.buildMatrix(this.N, this.N, this.UNDEFINED)\n        this.logicalBoard.rows = this.buildMatrix(this.N, this.N + 1, false)\n        this.logicalBoard.cols = this.buildMatrix(this.N, this.N + 1, false)\n        this.logicalBoard.squares = this.buildMatrix(this.N, this.N + 1, false)\n        this.logicalBoard.blocked = this.buildMatrix(this.N, this.N + 1, false)\n        this.fillBoard()\n    }\n\n    public solveBoard(): boolean {\n        const solve = (i: number, j: number): boolean => {\n            if (i >= this.N) return true\n            if (j >= this.N) return solve(i + 1, 0)\n            if (this.board[i][j] !== this.UNDEFINED) return solve(i, j + 1)\n\n            for (let x of this.shuffle(Array.from({ length: this.N }, (_, i) => i + 1))) {\n                if (this.setPosition(i, j, x)) {\n                    if (solve(i, j + 1)) return true\n                    else this.resetPosition(i, j)\n                }\n            }\n            return false\n        }\n        return solve(0, 0)\n    }\n\n    private fillBoard(): void {\n        this.solveBoard()\n        let numOfCells = Math.ceil(this.N * this.N * (1 - this.fill))\n        let positions = Array.from(Array(this.N * this.N).keys())\n\n        for (let i = 0; i < this.N; i++) positions = this.shuffle(positions)\n\n        for (let i = 0; i < numOfCells; i++) {\n            const row = Math.floor(positions[i] / this.N)\n            const col = positions[i] % this.N\n            const value = this.board[row][col]\n            const idSquare = this.getIdSquare(row, col)\n\n            this.board[row][col] = this.UNDEFINED\n            this.logicalBoard.rows[row][value] = false\n            this.logicalBoard.cols[col][value] = false\n            this.logicalBoard.squares[idSquare][value] = false\n        }\n\n        for (let i = 0; i < this.N; i++) {\n            for (let j = 0; j < this.N; j++) {\n                if (this.board[i][j] !== this.UNDEFINED) {\n                    this.logicalBoard.blocked[i][j] = true;\n                }\n            }\n        }\n    }\n\n    public getBoard(): number[][] {\n        return JSON.parse(JSON.stringify(this.board))\n    }\n\n    public setPosition(row: number, col: number, value: number): boolean {\n        const idSquare = this.getIdSquare(row, col)\n\n        if (this.board[row][col] !== this.UNDEFINED) return false\n        if (this.logicalBoard.rows[row][value]) return false\n        if (this.logicalBoard.cols[col][value]) return false\n        if (this.logicalBoard.squares[idSquare][value]) return false\n        if (this.logicalBoard.blocked[row][col]) return false\n\n        this.board[row][col] = value\n        this.logicalBoard.rows[row][value] = true\n        this.logicalBoard.cols[col][value] = true\n        this.logicalBoard.squares[idSquare][value] = true\n\n        return true\n    }\n\n    public resetPosition(row: number, col: number) {\n        const idSquare = this.getIdSquare(row, col)\n\n        if (this.logicalBoard.blocked[row][col]) return\n        if (this.board[row][col] === this.UNDEFINED) return\n\n        const value = this.board[row][col]\n        this.board[row][col] = this.UNDEFINED\n        this.logicalBoard.rows[row][value] = false\n        this.logicalBoard.cols[col][value] = false\n        this.logicalBoard.squares[idSquare][value] = false\n    }\n\n    public checkSudoku(): boolean {\n        const rows = this.buildMatrix(this.N, this.N + 1, false)\n        const cols = this.buildMatrix(this.N, this.N + 1, false)\n        const squares = this.buildMatrix(this.N, this.N + 1, false)\n\n        for (let i = 0; i < this.N; i++) {\n            for (let j = 0; j < this.N; j++) {\n                const value = this.board[i][j]\n                const idSquare = this.getIdSquare(i, j)\n\n                if (this.board[i][j] === this.UNDEFINED) return false\n                if (rows[i][value]) return false\n                if (cols[j][value]) return false\n                if (squares[idSquare][value]) return false\n\n                rows[i][value] = true\n                cols[j][value] = true\n                squares[idSquare][value] = true\n            }\n        }\n\n        return true\n    }\n\n    public getHint(row: number, col: number): boolean[] {\n        const nums: boolean[] = [false]\n        const idSquare = this.getIdSquare(row, col)\n\n        for (let x = 1; x <= this.N; x++) {\n            nums.push(false)\n            if (this.logicalBoard.blocked[row][col]) continue\n            if (this.logicalBoard.cols[col][x]) continue\n            if (this.logicalBoard.rows[row][x]) continue\n            if (this.logicalBoard.squares[idSquare][x]) continue\n            nums[x] = true\n        }\n\n        return nums\n    }\n\n    private getIdSquare(row: number, col: number): number {\n        return Math.floor(col / 3) + Math.floor(row / 3) * 3\n    }\n\n    private shuffle(array: number[]): number[] {\n        let currentIndex = array.length\n        while (currentIndex !== 0) {\n            const randomIndex = Math.floor(Math.random() * currentIndex)\n            currentIndex--\n            [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]]\n        }\n        return array\n    }\n\n    private buildMatrix<T>(n: number, m: number, value: T): T[][] {\n        const matrix: T[][] = []\n        for (let i = 0; i < n; i++) {\n            matrix.push(Array(m).fill(value))\n        }\n        return matrix\n    }\n}","import React from 'react'\nimport './App.css'\nimport { Board } from './Components/Board'\nimport { Keyboard } from './Components/Keyboard'\nimport { Modal, ModalState } from './Components/Modal'\nimport { Hint } from './Models/Hint'\nimport { Position } from './Models/Position'\nimport { Sudoku } from './Models/Sudoku'\n\n\nfunction App() {\n\tconst [fill, setFill] = React.useState(0.5)\n\tconst sudoku = React.useRef(new Sudoku(fill))\n\tconst [board, setBoard] = React.useState(sudoku.current.getBoard())\n\tconst [selectedPosition, setSelectedPosition] = React.useState<Position>({ row: -1, col: -1 })\n\tconst [hint, setHint] = React.useState<Hint>([])\n\tconst [modalState, setModalState] = React.useState<ModalState>({ title: '', message: '', modal: false })\n\t\n\n\tfunction solveSudoku() {\n\t\tif(sudoku.current.solveBoard()){\n\t\t\tsetBoard(sudoku.current.getBoard())\n\t\t}\n\t\telse{\n\t\t\tsetModalState({\n\t\t\t\ttitle: 'Erro',\n\t\t\t\tmessage: 'Não existe solução para o estado atual',\n\t\t\t\tmodal: true\t\n\t\t\t})\n\t\t}\n\t}\n\n\tfunction handleInputRange(event: React.SyntheticEvent<HTMLInputElement>) {\n\t\tconst value = Number((event.nativeEvent.target as HTMLInputElement).value)\n\t\tsetFill(value)\n\t}\n\n\tReact.useEffect(() => {\n\t\tsudoku.current = new Sudoku(fill)\n\t\tsetBoard(sudoku.current.getBoard())\n\t}, [fill])\n\n\tReact.useEffect(() => {\n\t\tconst { row, col } = selectedPosition\n\t\tif (row === -1 && col === -1) setHint([])\n\t\telse setHint(sudoku.current.getHint(row, col))\n\t}, [selectedPosition])\n\n\tReact.useEffect(() => {\n\t\tif(sudoku.current.checkSudoku()){\n\t\t\tsetModalState({ \n\t\t\t\ttitle: 'Parabéns',\n\t\t\t\tmessage: `Parabéns você concluiu o sudoku com ${fill*100}% de preenchimento`,\n\t\t\t\tmodal: true\t\n\t\t\t})\n\t\t}\n\t}, [board, fill])\n\n\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"bg-top\"></div>\n\t\t\t<div className=\"bg-bottom\"></div>\n\t\t\t<Modal setModalState={setModalState} status={modalState} />\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>Sudoku</h1>\n\t\t\t\t<h3>Preenchimento { fill*100 }% </h3>\n\t\t\t\t<div className=\"m-auto\">\n\t\t\t\t\t<button onClick={solveSudoku}>Obter solução</button>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"m-auto\">\n\t\t\t\t\t<input value={fill} min=\"0\" max=\"1\" step=\"0.1\" type=\"range\" onChange={handleInputRange} />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"m-auto\">\n\t\t\t\t\t<Board\n\t\t\t\t\t\tboard={board}\n\t\t\t\t\t\tblockedBoard={sudoku.current.logicalBoard.blocked}\n\t\t\t\t\t\tselectedPosition={selectedPosition}\n\t\t\t\t\t\tsetSelectedPosition={setSelectedPosition}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<Keyboard board={board} selectedPosition={selectedPosition} sudoku={sudoku} setBoard={setBoard} hint={hint} />\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}